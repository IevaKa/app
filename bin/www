#!/usr/bin/env node
const http = require('http');
let app = require('../app');
const { connection } = require('mongoose');
const socketIo = require("socket.io")

// catch 404 and render a not-found.hbs templat
app.use((req, res, next) => {
  res.status(404);
  res.send('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.send('error');
  }
});


let server = http.createServer(app);
// const io = socketIo(server);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

// Socket io 

// io.on("connection", (socket) => {
//   console.log("New client connected");

//   // if (interval) {
//   //   clearInterval(interval);
//   // }
//   // interval = setInterval(() => getApiAndEmit(socket), 1000);
//   socket.on("disconnect", () => {
//     console.log("Client disconnected");
//     // clearInterval(interval);
//   });
// });

let connectedUsers = [];

// console.log(connectedStudent, connectedTa);

const io = socketIo(server);
// var nsp = io.of("/events");
// var private = io.of("/private");
//Change io with nsp/private on line 6
io.on("connection", function (socket) {
  console.log("User connected");

  // join room
  socket.on("logedin", function (data) {
    console.log('socket loggin')
    connectedUsers.push(data.username);
    connectedUsers = [...new Set (connectedUsers)];
    console.log('socket array: ', connectedUsers)
    io.emit("connected-users", {
      connectedUsers: connectedUsers,
    });
  });


  // disconnect
  socket.on("disconnect", function () {
    console.log("User disconnected");
  });
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});