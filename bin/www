#!/usr/bin/env node
const http = require('http');
let app = require('../app');
const { connection } = require('mongoose');
const webSocketServer = require("websocket").server;
const webSocketServerPort = 5555;
// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.send('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.send('error');
  }
});

let server = http.createServer(app);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

// let myServer = server.listen(process.env.PORT, () => {
//   console.log(`Listening on http://localhost:${process.env.PORT}`);
// });
let myServer = server.listen(webSocketServerPort, () => {
  console.log(`Listening on http://localhost:${webSocketServerPort}`);
});

// Socket setup

const wsServer = new webSocketServer({
  httpServer: myServer
});

const clients = {};

const getUniqueID = () => {
  const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  return s4() + s4() + '-' + s4();
}

wsServer.on('request', function (request) {
  let userID = getUniqueID();
  console.log((new Date()) + 'Recieved a new connection from origin' + http.request.origin + '.');

  const connection = request.accept(null, request.origin);
  clients[userID] = connection;
  console.log('connected' + userID + ' in ' + Object.getOwnPropertyNames(clients));


  connection.on('message', function (message) {
    if (message.type === 'utf8') {
      console.log('Received Massage', message.utf8Data)

      // broadcasting message to all connected clients
      for (key in clients) {
        clients[key].sendUTF(message.utf8Data);
        console.log('sent Message to: ', clients[key]);
      }
    }
  })
});



